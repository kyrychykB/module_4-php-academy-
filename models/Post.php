<?php

namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "post".
 *
 * @property integer $id
 * @property integer $category_id
 * @property string $title
 * @property string $description
 * @property string $created_at
 * @property string $updated_at
 *
 * @property PostCategory $category
 */
class Post extends ActiveRecord
{
    public $image;
    public $current_tags;

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            'TimestampBehavior' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                'value' => new Expression('NOW()'),
            ],
            'image' => [
                'class' => 'rico\yii2images\behaviors\ImageBehave',
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'post';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category_id', 'view_total', 'view_current'], 'integer'],
            [['description'], 'string'],
            [['image'], 'file', 'extensions' => 'png, jpg'],
            [['created_at', 'updated_at', 'view_total', 'view_current', 'current_tags'], 'safe'],
            [['title'], 'string', 'max' => 255],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => PostCategory::className(), 'targetAttribute' => ['category_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Category',
            'title' => 'Title',
            'description' => 'Description',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'view_total' => 'Total views'
        ];
    }

    /**
     * Returns category
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(PostCategory::className(), ['id' => 'category_id']);
    }

    /**
     * Returns tags tied to post
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])->viaTable('post_tag', ['post_id' => 'id']);
    }


    /**
     * Generates random int value from 0 to 5
     * @return int
     */
    public function generateRandomViews()
    {
        return rand(0, 5);
    }


    /**
     * uploads image
     * @return bool
     */
    public function uploadImage()
    {
        if($this->validate()){
            $path = 'uploads/store/' . $this->image->baseName . '.' . $this->image->extension;
            $this->image->saveAs($path);
            $this->attachImage($path, true);
            @unlink($path);
            return true;
        } else {
            return false;
        }
    }

    /**
     * removes main image
     * @return bool
     */
    public function deleteImage() {
        $image = $this->getImage();
        return $this->removeImage($image);
    }

    public function afterFind()
    {
        parent::afterFind();
        $this->current_tags = ArrayHelper::map($this->tags, 'title', 'title');
    }


    /**
     * @return bool
     */
    public function beforeDelete()
    {
        if (!parent::beforeDelete()) {
            return false;
        }
        return $this->deleteImage();
    }

    public function beforeSave($insert =false)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @return bool
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);

        $this->updateTags();

        $this->image = UploadedFile::getInstance($this, 'image');
        if($this->image) {
            $old_image = $this->getImage();
            if(!empty($old_image)) {
                $this->removeImage($old_image);
            }
            return $this->uploadImage();
        }
        return true;
    }

    private function updateTags()
    {
        PostTag::deleteAll(['post_id' => $this->id]);
        if(!empty($this->current_tags)) {
            foreach ($this->current_tags as $tag_title) {
                if (!$tag = Tag::findOne(['title' => $tag_title])){
                    $tag = $this->createNewTag($tag_title);
                }
                $this->crateNewPostTag($this->id, $tag->id);
            }
        }
    }

    private function createNewTag($tag_title)
    {
        $tag = new Tag();
        $tag->title = $tag_title;
        return ($tag->save()) ? $tag : false;
    }

    private function crateNewPostTag($post_id, $tag_id)
    {
        $post_tag = new PostTag();
        $post_tag->post_id = $post_id;
        $post_tag->tag_id = $tag_id;
        return ($post_tag->save()) ? $post_tag : false;
    }

}
